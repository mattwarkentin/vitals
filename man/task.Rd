% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{task}
\alias{task}
\alias{task_create}
\alias{task_solve}
\alias{task_score}
\title{Evaluation tasks}
\usage{
task_create(dataset, name = deparse(substitute(dataset)), dir = eval_log_dir())

task_solve(task, solver)

task_score(task, scorer)
}
\arguments{
\item{dataset}{A tibble with, minimally, columns \code{input} and \code{target}.}

\item{solver}{A function that takes an element of \code{dataset$input} as input
and determines a value approximating \code{dataset$target}. Its return value should
be a list with elements \code{result} (the final response) and \code{chat} (an ellmer
chat used to solve the problem, or a list of them). Or, just supply an
ellmer chat.}

\item{scorer}{A function that evaluates how well the solver's return value
approximates the corresponding elements of \code{dataset$target}.}
}
\value{
Each of these functions return a \code{task}, which is a subclass of a tibble.
\itemize{
\item \code{task_create()} appends column \code{id}.
\item \code{task_solve()} appends columns \code{output} and \code{solver}.
\item \code{task_score()} appends columns \code{score} and \code{scorer}.
}
}
\description{
Evaluation \code{tasks} provide a flexible data structure for evaluating LLM-based
tools.
\enumerate{
\item \strong{Datasets} contain a set of labelled samples. Datasets are just a
tibble with columns \code{input} and \code{target}, where \code{input} is a prompt
and \code{target} is either literal value(s) or grading guidance. Situate datasets
inside of a task with \code{task_create()}.
\item Solvers evaluate the input in the dataset and produce a final result.
The simplest solver is just an ellmer chat---evaluate a task with a solver
using \code{task_solve()}.
\item Scorers evaluate the final output of solvers. They may use text
comparisons, model grading (like \code{\link[=model_graded_qa]{model_graded_qa()}}), or other custom
schemes. Score solver results using \code{task_score()}.
}
}
\examples{
if (interactive()) {
  library(ellmer)
  library(tibble)

  simple_addition <- tibble(
    input = c("What's 2+2?", "What's 2+3?"),
    target = c("4", "5")
  )

  tsk <- task_create(dataset = simple_addition)
  tsk

  tsk <- task_solve(tsk, solver = chat_claude())
  tsk

  tsk <- task_score(tsk, scorer = model_graded_qa())
  tsk
}

}
